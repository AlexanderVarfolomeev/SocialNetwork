@page "/Profile/{username}"
@using SocialNetwork.Web.Pages.Users.Services
@using SocialNetwork.Web.Pages.Users.Models
@using SocialNetwork.Web.Pages.Posts.Models
@using SocialNetwork.Web.Pages.Posts.Services
@inject IAccountService AccountService
@inject IPostService PostService
@layout MainLayout

<MudGrid Spacing="1" Justify="Justify.Center">
    <MudItem xs="3">
        <MudPaper Class="border-solid  border mud-border-primary pa-4" Elevation="0">
            <MudImage Fluid="true" ObjectFit="ObjectFit.Fill" Src="@($"data:image/jpeg;base64,{User.CurAvatar.Content}")"></MudImage>
        </MudPaper>
    </MudItem>
    <MudItem xs="9">
        <MudPaper Class="border-solid  border-2 mud-border-primary pa-4" Elevation="0">
            <MudText Typo="Typo.h3">@User.Name @User.Surname</MudText>
            <MudText Typo="Typo.body1">About: @User.Status</MudText>
            <MudText Typo="Typo.body1">Birthdate: @User.Birthday.ToString("dd MMMM yyyy")</MudText>
            <MudText Typo="Typo.body1">Email: @User.Email</MudText>
            <MudText Typo="Typo.body1">Phone: @User.PhoneNumber</MudText>
        </MudPaper>
    </MudItem>
    <MudItem xs="10">
        <MudStack Class="border-solid  border-2 mud-border-primary pa-4">
            @foreach (var post in _posts)
            {
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatar Color="Color.Secondary">
                                <MudImage Src="@($"data:image/jpeg;base64,{User.CurAvatar.Content}")"></MudImage>
                            </MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">@User.UserName</MudText>
                            <MudText Typo="Typo.body2">@post.CreationDateTime.ToString("dd MMMM yyyy")</MudText>
                            <MudText Typo="Typo.body2">@post.CreationDateTime.ToString("HH:mm")</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default"/>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.body2">@post.Text</MudText>
                        @foreach (var image in post.Attachments)
                        {
                            <MudImage Src="@($"data:image/jpeg;base64,{image.Content}")" Width="200" Height="200"></MudImage>
                        }
                    </MudCardContent>
                    <MudCardActions>
                        <MudToggleIconButton ToggledChanged="async () => await LikePost(post)"
                                             Toggled="@post.IsLiked"
                                             Icon="@Icons.Material.Outlined.FavoriteBorder" Color="@Color.Error" Title="Off"
                                             ToggledIcon="@Icons.Material.Filled.Favorite" ToggledColor="@Color.Success" ToggledTitle="On"/>
                        <MudText>@post.Likes</MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.Comment" Color="Color.Default"/>
                    </MudCardActions>
                </MudCard>
            }
        </MudStack>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    public string Username { get; set; }

    private IEnumerable<PostModel> _posts = new List<PostModel>();

    private AccountModel User { get; set; } = new AccountModel();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            User = await AccountService.GetAccountByUsername(Username);
            _posts = await PostService.GetPostsByUser(User.Id);
            foreach (var post in _posts)
            {
                post.IsLiked = await PostService.IsUserLikedPost(post.Id, Settings.CurUserId);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private async Task LikePost(PostModel post)
    {
        await PostService.LikePost(post.Id);
        post.IsLiked = !post.IsLiked;
        post.Likes += post.IsLiked ? 1 : -1;
    }

}
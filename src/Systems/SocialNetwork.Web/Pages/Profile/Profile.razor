@page "/Profile"
@using SocialNetwork.Web.Pages.Users.Services
@using SocialNetwork.Web.Pages.Users.Models
@using SocialNetwork.Web.Pages.Posts.Models
@using SocialNetwork.Web.Pages.Posts.Services
@using SocialNetwork.Web.Pages.Posts
@using Blazored.LocalStorage
@inject IAccountService AccountService
@inject IPostService PostService
@inject ILocalStorageService LocalStorage
@inject IDialogService DialogService
@layout MainLayout
@attribute [Authorize]

<MudGrid Spacing="1" Justify="Justify.Center">
    <MudItem xs="3">
        <MudPaper Elevation="0">
            <MudImage Fluid="true" ObjectFit="ObjectFit.Fill" Src="@($"data:image/jpeg;base64,{User.CurAvatar.Content}")"></MudImage>
        </MudPaper>
    </MudItem>
    <MudItem xs="7">
        <MudPaper Elevation="0">
            <MudText Typo="Typo.h3">@User.Name @User.Surname</MudText>
            <MudText Typo="Typo.body1">About: @User.Status</MudText>
            <MudText Typo="Typo.body1">Birthdate: @User.Birthday.ToString("dd MMMM yyyy")</MudText>
            <MudText Typo="Typo.body1">Email: @User.Email</MudText>
            <MudText Typo="Typo.body1">Phone: @User.PhoneNumber</MudText>
        </MudPaper>
    </MudItem>
    <MudItem xs="2">
        <MudPaper >
            <MudList Clickable="true">
                <MudListItem Text="Create new post." OnClick="CreatePost" Icon="@Icons.Material.Filled.CreditCard"/>
                <MudListItem Text="Edit info" OnClick="EditInfo"  Icon="@Icons.Material.Filled.Edit"/>
                <MudDivider/>
                <MudListItem Text="Dialogs" Icon="@Icons.Material.Filled.Chat"/>
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xs="10">
        <Posts UserPosts="@_posts"></Posts>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    public string Username { get; set; }


    private List<PostModel> _posts = new List<PostModel>();

    private AccountModel User { get; set; } = new AccountModel();

    protected override async Task OnInitializedAsync()
    {
        await Reload();
    }

    private async Task Reload()
    {
        try
        {
            User = await AccountService.GetAccount(await LocalStorage.GetItemAsync<Guid>("currentUserId"));
            _posts = (await PostService.GetPostsByUser(User.Id, 0, 1000)).ToList();
            foreach (var post in _posts)
            {
                post.IsLiked = await PostService.IsUserLikedPost(post.Id);
            }
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private async Task CreatePost()
    {
        DialogOptions opts = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true};
        var dialog = await DialogService.ShowAsync<AddPostDialog>("Add post", opts);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            _posts.Insert(0, (PostModel)result.Data);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task EditInfo()
    {
        var parameters = new DialogParameters { { "Model", User } };
        DialogOptions opts = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true};
        var dialog = await DialogService.ShowAsync<EditProfileDialog>("Edit profile", parameters, opts);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            User = await AccountService.GetAccount(await LocalStorage.GetItemAsync<Guid>("currentUserId"));
            await InvokeAsync(StateHasChanged);
        }
    }

}
@page "/Chats/{dialogId}"
@using SocialNetwork.Web.Pages.Messenger.Services
@using SocialNetwork.Web.Pages.Users.Services
@using SocialNetwork.Web.Pages.Messenger.Models
@using SocialNetwork.Web.Pages.Users.Models
@using Microsoft.AspNetCore;
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http.Headers
@layout MainLayout
@inject IMessengerService MessengerService
@inject IAccountService AccountService
@inject IDialogService DialogService
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager

<MudGrid>
    <MudItem xs="12">
        <MudStack>
            <div class="d-flex flex-column px-4" style="max-height:65vh;min-height:65vh;   overflow-y: scroll;" id="chatContainer">
                @foreach (var message in _messages)
                {
                    <div class="d-flex flex-row my-4">
                        <div class="mr-4">
                            <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">@message.User.CurAvatar</MudAvatar>
                        </div>
                        <div>
                            <MudText Typo="Typo.body1">@message.User.Name @message.User.Surname</MudText>
                            <MudText Typo="Typo.body2">@message.User.UserName</MudText>
                            <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.CreationDateTime.ToString("dd MMM, yyyy hh:mm tt")</MudText>
                            <MudText T="string" Lines="5" Typo="Typo.body2" Style=" padding: 15px;background-color: black;border-radius: 5px;margin-top:5px">@message.Text</MudText>
                            @foreach (var image in message.Attachments)
                            {
                                <MudImage Src="@($"data:image/jpeg;base64,{image.Content}")" Width="200" Height="200"></MudImage>
                            }
                        </div>
                    </div>
                }
            </div>
        </MudStack>
    </MudItem>
    <MudItem xs="8">
        <MudTextField T="string" @bind-Value="TextValue" Label="Outlined" Variant="Variant.Outlined" Lines="5"></MudTextField>
    </MudItem>
    <MudItem xs="4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await SendMessage())">Send</MudButton>
    </MudItem>
    <MudItem xs="6">
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload"
                           for="@context">
                    Upload Files
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
        @if (files != null)
        {
            <MudText Typo="@Typo.h6">@files.Count() File@(files.Count() == 1 ? "" : "s"):</MudText>
            <MudList>
                @foreach (var file in files)
                {
                    <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                        @file.Name <code>@file.Size bytes</code>
                    </MudListItem>
                }
            </MudList>
        }
    </MudItem>
</MudGrid>

@code
{
    [Parameter]
    public string dialogId { get; set; }

    IList<IBrowserFile> files = new List<IBrowserFile>();

    public HubConnection hubConnection { get; set; }

    public string TextValue { get; set; }

    private List<AccountModel> _userInChatModels = new List<AccountModel>();

    public List<MessageModel> _messages = new List<MessageModel>();
    private Guid _toUserId;


    protected override async Task OnInitializedAsync()
    {
        var userId = await LocalStorageService.GetItemAsync<Guid>("currentUserId");

        var id = Guid.Parse(dialogId);
        var ids = (await MessengerService.GetUsersInChat(id)).ToList();
        _toUserId = ids.FirstOrDefault(x => x.UserId != userId)!.UserId;

        foreach (var userInChatModel in ids)
        {
            var user = await AccountService.GetAccount(userInChatModel.UserId);
            _userInChatModels.Add(user);
            user.CurAvatar = (await AccountService.GetAvatars(user.Id)).MaxBy(x => x.CreationDateTime)?.Content;
        }
        _messages = (await MessengerService.GetMessages(id)).OrderByDescending(x => x.CreationDateTime).ToList();
        foreach (var message in _messages)
        {
            message.User = _userInChatModels.FirstOrDefault(x => x.Id == message.SenderId);
            message.Attachments = (await MessengerService.GetAttachments(message.Id)).ToList();
        }


        var accessToken = await LocalStorageService.GetItemAsync<string>("authToken");
        hubConnection = new HubConnectionBuilder()
            .WithUrl($"http://localhost:5000/Chat", opts => opts.Headers.Add("Authorization", $"Bearer {accessToken}"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<MessageResponse>("ReceiveMessage", async (response) =>
        {
            if (response.ChatId.ToString() == dialogId)
            {
                MessageModel msg = new MessageModel()
                {
                    CreationDateTime = response.CreationDateTime,
                    Id = response.Id,
                    SenderId = response.SenderId,
                    Text = response.Text,
                    ChatId = response.ChatId,
                    User = _userInChatModels.FirstOrDefault(x => x.Id == response.SenderId)
                };
               
                await MessengerService.AddAttachments(msg.Id, files);
                _messages.Add(msg);
                _messages = _messages.OrderByDescending(x => x.CreationDateTime).ToList();
                msg.Attachments = (await MessengerService.GetAttachments(msg.Id)).ToList();

                files = new List<IBrowserFile>();
                await InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
    }

    private async Task SendMessage()
    {
        await hubConnection.InvokeAsync("SendMessage", TextValue, _toUserId);
        TextValue = "";
    }

    private void UploadFiles(IBrowserFile file)
    {
        files.Add(file);
       
    }
}